-- Some example solutions to LeetCode problems written in Orng
-- https://leetcode.com/problemset/all/
leetcode::Module = (
    test_all::()->() = {
        test_twoSum()
        test_addTwoNumbers()
        --test_lengthOfLongestSubstring()
        test_findMedianSortedArrays()
        test_longestPalindrome()
        test_convert()
        test_reverse()
        test_myAtoi()
        test_isPalindrome()
        test_isMatch()
        test_maxArea()
    }


    -- not leetcode, but a functional approach to fizzbuzz
    fizzbuzz::(n:Int)->() = 
        if n % 16 == 0 {
            "fizzbuzz"
        } else if n % 3 == 0 {
            "fizz"
        } else if n % 5 == 0 {
            "buzz"
        } else {
            std.string.format(255, "%d", n)
        }

    fizzbuzz2::(n:Int)->String =
        case n % 15 {
            0           -> "fizzbuzz"

            3, 6, 9, 12 -> "fizz"

            5, 10       -> "buzz"

            else        -> std.string.format(255, "%d", n)
        }


    -- Given an array of integers nums and an integer target, return indices of
    -- the two numbers such that they add up to target.
    -- https://leetcode.com/problems/two-sum/
    twoSum::(nums:[]Int, target:Int)->[2]Int = {
        for i := 0; i < nums.length - 1; i += 1 {
            for j := i + 1; j < nums.length; j += 1 {
                if nums[i] + nums[j] == target {
                    return new [2]Int[i, j]
                }
            }
        }
        return new [2]Int[-1, -2]
    }

    test_twoSum::()->() = {
        nums: [4]Int = [2, 7, 11, 15]
        target := 9

        ans := twoSum(nums, target)

        if nums[ans[0]] + nums[ans[1]] == target {
            std.system.println("twoSum: Passed!")
        } else {
            std.system.println("twoSum: Failed")
        }
    }


    -- You are given two non-empty linked lists representing two non-negative 
    -- integers. The digits are stored in reverse order, and each of their nodes 
    -- contains a single digit. Add the two numbers and return the sum as a linked
    -- list.
    -- https://leetcode.com/problems/add-two-numbers/
    ListNode::Type = (
        val:Int
        next:&ListNode
    )

    convertToInt::(l:&ListNode)->Int =
        if l.next == 0:&ListNode {
            l.val
        } else {
            l.val + convertToInt(l.next) * 10
        }

    convertToList::(i:Int)->&ListNode =
        if i < 10 {
            new ListNode(i, nothing)
        } else {
            new ListNode(i % 10, convertToList(i / 10))
        }

    addTwoNumbers::(l1:&ListNode, l2:&ListNode)->&ListNode = 
        convertToList(convertToInt(l1) + convertToInt(l2))

    test_addTwoNumbers::()->() = {
        l1_c := new ListNode(3, nothing)
        l1_b := new ListNode(4, l1_c)
        l1   := new ListNode(2, l1_b)
        l2_c := new ListNode(4, nothing)
        l2_b := new ListNode(6, l2_c)
        l2   := new ListNode(5, l2_b)

        ans := addTwoNumbers(l1, l2)

        if ans.val == 7 && ans.next.val == 0 && ans.next.next.val == 8 {
            std.system.println("addTwoNumbers: Passed!")
        } else {
            std.system.println("addTwoNumbers: Failed")
        }
    }


    -- Given a string str, find the length of the longest substring without 
    -- repeating characters.
    -- https://leetcode.com/problems/longest-substring-without-repeating-characters/
    lengthOfLongestSubstring::(str:String)->Int = {
        -- The characters in str from i to j are unique
        areDistinct::(str:String, i:Int, j:Int)->Bool = {
            -- Note : Default values in visited are false
            visited:[256]Bool
            for k := i; k <= j; k += 1 {
                charCode := str[k]:Int
                if visited[charCode] {
                    return false
                }
                visited[charCode] = true
            }
            return true
        }
        n := str.length
        res := 0
        
        -- try all possible substrings
        -- for each unique one, remember the longest
        for i := 0; i < n; i += 1 {
            for j := i; j < n; j += 1 {
                if areDistinct(str, i, j) {
                    res = std.math.max(res, j - i + 1):Int
                }
            }
        }
                    
        return res
    }

    test_lengthOfLongestSubstring::()->() = {
        s := "abcabcbb"

        ans := lengthOfLongestSubstring(s)

        if ans == 3 {
            std.system.println("lengthOfLongestSubstring: Passed!")
        } else {
            std.system.println("lengthOfLongestSubstring: Failed %d", ans)
        }
    }


    -- Given two sorted arrays nums1 and nums2 of size m and n respectively, 
    -- return the median of the two sorted arrays.
    -- https://leetcode.com/problems/median-of-two-sorted-arrays/
    findMedianSortedArrays::(nums1:[]Int, nums2:[]Int)->Real = {
        merged := new [nums1.length + nums2.length]Int
        defer free merged

        i := 0
        j := 0
        for i + j < merged.length {
            if i < nums1.length && j < nums2.length {
                if nums1[i] < nums2[j] {
                    merged[i + j] = nums1[i]
                    i += 1
                } else {
                    merged[i + j] = nums2[j]
                    j += 1
                }
            } else if i < nums1.length {
                merged[i + j] = nums1[i]
                i += 1
            } else if j < nums2.length {
                merged[i + j] = nums2[j]
                j += 1
            }
        }

        if merged.length % 2 == 0 {
            {merged[merged.length / 2] + merged[merged.length / 2 + 1]} / 2.0
        } else {
            merged[merged.length / 2]:Real
        }
    }

    test_findMedianSortedArrays::()->() = {
        nums1: [2]Int = [1, 3]
        nums2: [1]Int = [2]

        ans := findMedianSortedArrays(nums1, nums2)

        if ans == 2.0 {
            std.system.println("findMedianSortedArrays: Passed!")
        } else {
            std.system.println("findMedianSortedArrays: Failed %f", ans)
        }
    }


    -- Given a string s, return the longest palindromic substring in s.
    -- https://leetcode.com/problems/longest-palindromic-substring/
    longestPalindrome::(s:String)->String = {
        expandAroundCenter::(s:String, left:Int, right:Int)->Int = {
            for left >= 0 && right < s.length && s[left] == s[right] {
                left -= 1
                right += 1
            }
            right - left - 1
        }

        start := 0
        end := 0
        for i := 0; i < s.length; i += 1 {
            len1 := expandAroundCenter(s, i, i)
            len2 := expandAroundCenter(s, i, i + 1)
            len := std.math.max(len1, len2):Int
            if len > end - start {
                start = i - {len - 1} / 2
                end = i + len / 2
            }
        }
        s[start;end + 1]
    }

    test_longestPalindrome::()->() = {
        s := "babad"

        ans := longestPalindrome(s)

        if std.string.equals(ans, "bab") || std.string.equals(ans, "aba") {
            std.system.println("longestPalindrome: Passed!")
        } else {
            std.system.println("longestPalindrome: Failed %d", ans.length)
        }
    }


    -- Write the code that will take a string and make this conversion given a
    -- number of rows
    -- https://leetcode.com/problems/zigzag-conversion/
    convert
        ::(
            s:String, numRows:Int)
        -> 
        String 
    = {
        board: [][]Char = new [s.length][]Char
        for i := 0; i < s.length; i += 1 {
            board[i] = new [numRows]Char
        }
        defer {
            for i := 0; i < s.length; i += 1 {
                free board[i]
            }
            free board
        }

        x := 0
        y := 0
        diagnolizing:Bool = false
        for i := 0; i < s.length; i += 1 {
            board[x][y] = s[i]
            if diagnolizing {
                y -= 1
                x += 1
                if y == 0 {
                    diagnolizing = false
                }
            } else {
                y += 1
                if y == numRows {
                    diagnolizing = true
                    y -= 2
                    x += 1
                }
            }
        }

        retval := new [s.length]Char
        k := 0
        for j := 0; j < numRows; j += 1 {
            for i := 0; i < s.length; i += 1 {
                if board[i][j] != '\0' {
                    retval[k] = board[i][j]
                    k += 1
                }
            }
        }

        retval
    }

    test_convert::()->() = {
        ans := convert("PAYPALISHIRING", 3)

        if std.string.equals(ans, "PAHNAPLSIIGYIR") {
            std.system.println("convert: Passed!")
        } else {
            std.system.println("convert: Failed")
        }
    }


    -- Given a signed 32-bit integer x, return x with its digits reversed. If 
    -- reversing x causes the value to go outside the signed 32-bit integer range
    -- [-2^31, 2^31 - 1], then return 0.
    -- https://leetcode.com/problems/reverse-integer/
    reverseList::(list:&ListNode)->&ListNode = {
        prev:&ListNode = 0:&ListNode
        curr:&ListNode = list
        next:&ListNode = 0:&ListNode
        for curr != 0:&ListNode {
            next = curr.next
            curr.next = prev
            prev = curr
            curr = next
        }
        list = prev
        return list
    }
    
    reverse::(x:Int)->Int = convertToInt(reverseList(convertToList(x)))

    test_reverse::()->() = {
        ans := reverse(123)

        if ans == 321 {
            std.system.println("reverse: Passed!")
        } else {
            std.system.println("reverse: Failed")
        }
    }


    -- Implement the myAtoi(string s) function, which converts a string to a
    -- 32-bit signed integer (similar to C/C++'s atoi function).
    -- https://leetcode.com/problems/string-to-integer-atoi/
    myAtoi::(s:String)->Int = {
        x:Int = 0
        i:Int = 0
        sign:Bool = true

        -- Read in and ignore any leading whitespace
        for i < s.length && s[i] == ' ' {i += 1}

        -- Check sign
        if i == s.length {
            return 0
        } else if s[i] == '+' {
            sign = true
            i += 1
        } else if s[i] == '-' {
            sign = false
            i += 1
        }

        -- Read in next few digits as integer
        for ; i < s.length && std.string.isdigit(s[i]); i += 1 {
            x = x * 10 + s[i]:Int - '0':Int
        }

        if sign {x} else {-x}
    }

    test_myAtoi::()->() = {
        s := "42"

        ans := myAtoi(s)

        if ans == 42 {
            std.system.println("myAtoi: Passed!")
        } else {
            std.system.println("myAtoi: Failed")
        }
    }


    -- Given an integer x, return true if x is palindrome integer.
    -- An integer is a palindrome when it reads the same backward as forward.
    isPalindrome::(x:Int)->Bool = {
        list := convertToList(x)
        reversedList := reverseList(convertToList(x))
        for list != 0:&ListNode {
            if list.val != reversedList.val {
                return false
            }
            list = list.next
            reversedList = reversedList.next
        }
        return true
    }

    test_isPalindrome::()->() = {
        x := 121
        
        ans := isPalindrome(x)

        if ans {
            std.system.println("isPalindrome: Passed!")
        } else {
            std.system.println("isPalindrome: Failed")
        }
    }


    -- Given an input string s and a pattern p, implement regular expression 
    -- matching with support for '.' and '*' where:
    -- '.' Matches any single character.​​​​
    -- '*' Matches zero or more of the preceding element.
    -- The matching should cover the entire input string (not partial).
    isMatch::(s: String, p: String)->Bool = {
        i := 0 -- s index
        j := 0 -- p index

        for i < s.length {
            repeat:Bool = if j + 1 == p.length {false} else {p[j + 1] == '*'}

            if p[j] != '.' && s[i] != p[j] {
                if repeat {
                    j += 1
                } else {
                    return false
                }
            } else {
                i += 1
                if !repeat {
                    j += 1
                }
            }
        }
        true
    }

    test_isMatch::()->() = {
        s := "aa"
        p := "a*"

        ans := isMatch(s, p)

        if ans {
            std.system.println("isMatch: Passed!")
        } else {
            std.system.println("isMatch: Failed")
        }
    }


    -- You are given an integer array height of length n. There are n vertical 
    -- lines drawn such that the two endpoints of the ith line are (i, 0) and 
    -- (i, height[i]).
    -- Find two lines that together with the x-axis form a container, such that
    -- the container contains the most water.
    -- Return the maximum amount of water a container can store.
    maxArea::(height:[]Int, max:Int=0)->Int =
        for i := 0; i < height.length - 1; i += 1 {
            for j := i + 1; j < height.length; j += 1 {
                std.system.println("%d", std.math.abs(i - j))
                max = std.math.max(max, std.math.abs(i - j) * std.math.min(height[i], height[j])):Int
            }
        }

    test_maxArea::()->() = {
        height := [1,8,6,2,5,4,8,3,7]

        ans := maxArea(height)

        if ans == 49 {
            std.system.println("maxArea: Passed!")
        } else {
            std.system.println("maxArea: Failed %d", ans)
        }
    }
)