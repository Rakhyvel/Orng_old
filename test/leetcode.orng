// Some example solutions to LeetCode problems written in Orng
// https://leetcode.com/problemset/all/
leetcode::Module = (
    + test_all::()->() = {
        test_twoSum()
        test_addTwoNumbers()
        test_lengthOfLongestSubstring()
        test_findMedianSortedArrays()
        test_longestPalindrome()
        test_convert()
        test_reverse()
        test_myAtoi()
    }

    // Given an array of integers nums and an integer target, return indices of
    // the two numbers such that they add up to target.
    // https://leetcode.com/problems/two-sum/
    + 
    twoSum::(nums:[]Int, target:Int)->[2]Int = {
        ans: [2]Int = [-1, -1]
        for i := 0; i < nums.length - 1; i += 1 {
            for j := i + 1; j < nums.length; j += 1 {
                if nums[i] + nums[j] == target {
                    ans = [i, j]
                }
            }
        }
        return ans
    }

    + test_twoSum::()->() = {
        nums: [4]Int = [2, 7, 11, 15]
        target := 9

        ans := twoSum(&nums, target)

        if nums[ans[0]] + nums[ans[1]] == target {
            stdlib.system.println("twoSum: Passed!")
        } else {
            stdlib.system.println("twoSum: Failed")
        }
    }


    // You are given two non-empty linked lists representing two non-negative 
    // integers. The digits are stored in reverse order, and each of their nodes 
    // contains a single digit. Add the two numbers and return the sum as a linked
    // list.
    // https://leetcode.com/problems/add-two-numbers/
    + ListNode::Type = (
        val:Int
        next:&ListNode
    )
    convertToInt::(l:&ListNode)->Int = {
        if l.next == null {
            return l.val
        } else {
            bottom := convertToInt(l.next)
            return l.val + bottom * 10
        }
    }
    convertToList::(i:Int)->&ListNode = {
        retval := new ListNode
        if i < 10 {
            *retval = (i, null):ListNode
        } else {
            *retval = (i % 10, convertToList(i / 10)):ListNode
        }
        return retval
    }
    + addTwoNumbers::(l1:&ListNode, l2:&ListNode)->&ListNode = {
        return convertToList(convertToInt(l1) + convertToInt(l2))
    }

    + test_addTwoNumbers::()->() = {
        l1_c := new ListNode
        *l1_c = (3, null):ListNode
        l1_b := new ListNode
        *l1_b = (4, l1_c):ListNode
        l1 := new ListNode
        *l1 = (2, l1_b):ListNode
        l2_c := new ListNode
        *l2_c = (4, null):ListNode
        l2_b := new ListNode
        *l2_b = (6, l2_c):ListNode
        l2 := new ListNode
        *l2 = (5, l2_b):ListNode

        ans := addTwoNumbers(l1, l2)

        if ans.val == 7 && ans.next.val == 0 && ans.next.next.val == 8 {
            stdlib.system.println("addTwoNumbers: Passed!")
        } else {
            stdlib.system.println("addTwoNumbers: Failed")
        }
    }


    // Given a string s, find the length of the longest substring without 
    // repeating characters.
    // https://leetcode.com/problems/longest-substring-without-repeating-characters/
    + lengthOfLongestSubstring::(s:String)->Int = {
        longest := 0
        for i := 0; i < s.length; i += 1 {
            visited: [256]Bool
            for j := i; j < s.length; j += 1 {
                if visited[s[j]] {
                    break
                } else {
                    longest = stdlib.math.max(longest, j - i + 1):Int
                    visited[s[j]] = true
                }
            }
            visited[s[i]] = false
        }
        return longest
    }

    + test_lengthOfLongestSubstring::()->() = {
        s := "abcabcbb"

        ans := lengthOfLongestSubstring(s)

        if ans == 3 {
            stdlib.system.println("lengthOfLongestSubstring: Passed!")
        } else {
            stdlib.system.println("lengthOfLongestSubstring: Failed")
        }
    }


    // Given two sorted arrays nums1 and nums2 of size m and n respectively, 
    // return the median of the two sorted arrays.
    // https://leetcode.com/problems/median-of-two-sorted-arrays/
    + findMedianSortedArrays::(nums1:[]Int, nums2:[]Int)->Real = {
        merged := new [nums1.length + nums2.length]Int
        defer free merged

        i := 0
        j := 0
        for i + j < merged.length {
            if i < nums1.length && j < nums2.length {
                if nums1[i] < nums2[j] {
                    merged[i + j] = nums1[i]
                    i += 1
                } else {
                    merged[i + j] = nums2[j]
                    j += 1
                }
            } else if i < nums1.length {
                merged[i + j] = nums1[i]
                i += 1
            } else if j < nums2.length {
                merged[i + j] = nums2[j]
                j += 1
            }
        }

        if merged.length % 2 == 0 {
            return (merged[merged.length / 2] + merged[merged.length / 2 + 1]) / 2.0
        } else {
            return merged[merged.length / 2]:Real
        }
    }
    // T  <:  :T
    // x: Int = 4  // Ok
    // y: :Int = x // Not ok
    + test_findMedianSortedArrays::()->() = {
        nums1: [2]Int = [1, 3]
        nums2: [1]Int = [2]

        ans := findMedianSortedArrays(&nums1, &nums2)

        if ans == 2 {
            stdlib.system.println("findMedianSortedArrays: Passed!")
        } else {
            stdlib.system.println("findMedianSortedArrays: Failed")
        }
    }


    // Given a string s, return the longest palindromic substring in s.
    // https://leetcode.com/problems/longest-palindromic-substring/
    + longestPalindrome::(s:String)->String = {
        expandAroundCenter::(s:String, left:Int, right:Int)->Int = {
            L := left
            R := right
            for L >= 0 && R < s.length && s[L] == s[R] {
                L -= 1
                R += 1
            }
            return R - L - 1
        }

        start := 0
        end := 0
        for i := 0; i < s.length; i += 1 {
            len1 := expandAroundCenter(s, i, i)
            len2 := expandAroundCenter(s, i, i + 1)
            len := stdlib.math.max(len1, len2)
            if len > end - start {
                start = i - (len - 1) / 2
                end = i + len / 2
            }
        }
        return stdlib.string.substring(s, start, end + 1)
    }

    + test_longestPalindrome::()->() = {
        s := "babad"

        ans := longestPalindrome(s)

        if stdlib.string.equals(ans, "bab") || stdlib.string.equals(ans, "aba") {
            stdlib.system.println("longestPalindrome: Passed!")
        } else {
            stdlib.system.println("longestPalindrome: Failed")
        }
    }


    // Write the code that will take a string and make this conversion given a
    // number of rows
    // https://leetcode.com/problems/zigzag-conversion/
    + convert::(s:String, numRows:Int)->String = {
        board: [][]Char = new [s.length][]Char
        for i := 0; i < s.length; i += 1 {
            board[i] = new [numRows]Char
        }
        defer {
            for i := 0; i < s.length; i += 1 {
                free board[i]
            }
            free board
        }

        x := 0
        y := 0
        diagnolizing:Bool = false
        for i := 0; i < s.length; i += 1 {
            board[x][y] = s[i]
            if diagnolizing {
                y -= 1
                x += 1
                if y == 0 {
                    diagnolizing = false
                }
            } else {
                y += 1
                if y == numRows {
                    diagnolizing = true
                    y -= 2
                    x += 1
                }
            }
        }

        retval := new [s.length]Char
        k := 0
        for j := 0; j < numRows; j += 1 {
            for i := 0; i < s.length; i += 1 {
                if board[i][j] != '\0' {
                    retval[k] = board[i][j]
                    k += 1
                }
            }
        }

        return retval
    }

    + test_convert::()->() = {
        ans := convert("PAYPALISHIRING", 3)

        if stdlib.string.equals(ans, "PAHNAPLSIIGYIR") {
            stdlib.system.println("convert: Passed!")
        } else {
            stdlib.system.println("convert: Failed")
        }
    }


    // Given a signed 32-bit integer x, return x with its digits reversed. If 
    // reversing x causes the value to go outside the signed 32-bit integer range
    // [-2^31, 2^31 - 1], then return 0.
    // https://leetcode.com/problems/reverse-integer/
    reverseList::(list:&ListNode)->&ListNode = {
        prev:&ListNode = null
        curr:&ListNode = list
        next:&ListNode = null
        for curr != null {
            next = curr.next
            curr.next = prev
            prev = curr
            curr = next
        }
        list = prev
        return list
    }
    + reverse::(x:Int)->Int = return convertToInt(reverseList(convertToList(x)))

    + test_reverse::()->() = {
        ans := reverse(123)

        if ans == 321 {
            stdlib.system.println("reverse: Passed!")
        } else {
            stdlib.system.println("reverse: Failed")
        }
    }


    // Implement the myAtoi(string s) function, which converts a string to a
    // 32-bit signed integer (similar to C/C++'s atoi function).
    // https://leetcode.com/problems/string-to-integer-atoi/
    + myAtoi::(s:String)->Int = {
        x:Int = 0
        i:Int = 0
        sign:Bool = true

        // Read in and ignore any leading whitespace
        for i < s.length && s[i] == ' ' {i += 1}

        // Check sign
        if i == s.length {
            return 0
        } else if s[i] == '+' {
            sign = true
            i += 1
        } else if s[i] == '-' {
            sign = false
            i += 1
        }

        // Read in next few digits as integer
        for ; i < s.length && stdlib.string.isdigit(s[i]); i += 1 {
            x = x * 10 + s[i]:Int - '0':Int
        }

        return sign ? x ; -x
    }

    + test_myAtoi::()->() = {
        s := "42"

        ans := myAtoi(s)

        if ans == 42 {
            stdlib.system.println("myAtoi: Passed!")
        } else {
            stdlib.system.println("myAtoi: Failed")
        }
    }


    // You are given an mxn integer grid accounts where accounts[i][j] is the
    // amount of money the ith customer has in the jth bank. Return the wealth
    // that the richest customer has.
    + richestCustomerWealth::(accounts: [][]Int)->Int = {
        max := 0
        for i := 0; i < accounts.length; i += 1 {
            sum := 0
            for j := 0; j < accounts[i].length; j += 1 {
                sum += accounts[i][j]
            }
            max = stdlib.math.max(max, sum):Int
        }
        return max
    }

    
    // Validate whether a given string is a valid nested paranthesis string
    // Return the maximum parenthesis depth of the string
    // Ex: (()(()))() is valid
    //     )()(       is invalid
    + maxParenthesisDepth::(str: String)->Int = {
        acc: Int = 0
        max: Int = 0
        for i := 0; i < str.length; i += 1 {
            if acc < 0 {
                return -1 // Invalid string
            } else {
                max = stdlib.math.max(max, acc):Int
            }

            if str[i] == '(' {
                acc += 1
            } else if str[i] == ')' {
                acc -= 1
            }
        }

        return max
    }
)