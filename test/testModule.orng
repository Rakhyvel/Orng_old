testModule::Module = (
	A::Type = <a, b, c:Int>
	B::Type = <c:Int, d:Char, e>

	Complex::Type = (
		re:Real
		im:Real

		add::(c1:Complex, c2:Complex)->Complex = (.re=c1.re + c2.re, .im=c1.im + c2.im)
		sub::(c1:Complex, c2:Complex)->Complex = (.re=c1.re - c2.re, .im=c1.im - c2.im)
	)

	FileError::Type = <
		fileNotFound:Int
		resourceBusy
	>

	AllocationError::Type = <
		outOfMemory
		resourceBusy
	>

	givesAnError::()->FileError = FileError.fileNotFound

	hmm::()->FileError||AllocationError!Int = {
		errdefer std.system.println("hmm2")
		givesAnError()
	}

	-- Doesn't catch `main::(args:[]String)->Int = hmm catch 0`, when `hmm` isn't correct type
	main::(args:[]String)->Int = hmm() catch 0
)